import matplotlib
import matplotlib
import matplotlib.pyplot as plt
from climata.usgs import DailyValueIO
install.packages("climata")
import pandas as pd
from pandas.plotting import register_matplotlib_converters
import numpy as np
from climata.usgs import DailyValueIO
register_matplotlib_converters()
plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (20.0, 10.0)
nyears = 10
ndays = 365 * nyears
station_id = "06730200"
param_id = "00060"
datelist = pd.date_range(end=pd.datetime.today(), periods=ndays).tolist()
data = DailyValueIO(
data = DailyValueIO(
start_date=datelist[0],
end_date=datelist[-1],
station=station_id,
parameter=param_id,
)
for series in data:
flow = [r[1] for r in series.data]
dates = [r[0] for r in series.data]
plt.plot(dates, flow)
import matplotlib # sudo python3 -m pip install matplotlib
import matplotlib.pyplot as plt
from climata.usgs import DailyValueIO
import pandas as pd
from pandas.plotting import register_matplotlib_converters
import numpy as np
register_matplotlib_converters()
plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (20.0, 10.0)
# set parameters
nyears = 10
ndays = 365 * nyears
station_id = "06730200"
param_id = "00060"
datelist = pd.date_range(end=pd.datetime.today(), periods=ndays).tolist()
data = DailyValueIO(
start_date=datelist[0],
end_date=datelist[-1],
station=station_id,
parameter=param_id,
)
# create lists of date-flow values
for series in data:
flow = [r[1] for r in series.data]
dates = [r[0] for r in series.data]
plt.plot(dates, flow)
plt.xlabel('Date')
plt.ylabel('Streamflow')
plt.title(series.site_name)
plt.xticks(rotation='vertical')
plt.show()
import matplotlib # sudo python3 -m pip install matplotlib
import matplotlib.pyplot as plt
from climata.usgs import DailyValueIO
import pandas as pd
from pandas.plotting import register_matplotlib_converters
import numpy as np
register_matplotlib_converters()
plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (20.0, 10.0)
# set parameters
nyears = 10
ndays = 365 * nyears
station_id = "14092500"
param_id = "00010"
datelist = pd.date_range(end=pd.datetime.today(), periods=ndays).tolist()
data = DailyValueIO(
start_date=datelist[0],
end_date=datelist[-1],
station=station_id,
parameter=param_id,
)
# create lists of date-flow values
for series in data:
flow = [r[1] for r in series.data]
dates = [r[0] for r in series.data]
plt.plot(dates, flow)
plt.xlabel('Date')
plt.ylabel('Streamflow')
plt.title(series.site_name)
plt.xticks(rotation='vertical')
plt.show()
:qa!
stop
plt.close()
import matplotlib # sudo python3 -m pip install matplotlib
import matplotlib.pyplot as plt
from climata.usgs import DailyValueIO
import pandas as pd
from pandas.plotting import register_matplotlib_converters
import numpy as np
register_matplotlib_converters()
plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (20.0, 10.0)
# set parameters
nyears = 10
ndays = 365 * nyears
station_id = "14092500"
param_id = "00010"
datelist = pd.date_range(end = pd.datetime.today(), periods = ndays).tolist()
data = DailyValueIO(
start_date = datelist[0],
end_date = datelist[-1],
station = station_id,
parameter = param_id,
)
# create lists of date-flow values
for series in data:
flow = [r[1] for r in series.data]
dates = [r[0] for r in series.data]
plt.plot(dates, flow)
plt.xlabel('Date')
plt.ylabel('Temperature (Celsius Â°)')
plt.title(series.site_name)
plt.xticks(rotation='vertical')
plt.show()
library(reticulate)
use_python("/Library/Frameworks/Python.framework/Versions/3.7/bin/python3", required = TRUE)
reticulate::repl_python()
# ODFW Fish Count data (Monthly and Yearly)
ODFWDataMonthly <- read_csv("ODFWData.csv", col_types = cols(Season = col_factor()))
library(readxl)
# ODFW Fish Count data (Monthly and Yearly)
ODFWDataMonthly <- read_csv("ODFWData.csv", col_types = cols(Season = col_factor()))
?read.csv
?read_csv
??read_csv
library(readr)
# ODFW Fish Count data (Monthly and Yearly)
ODFWDataMonthly <- read_csv("ODFWData.csv", col_types = cols(Season = col_factor()))
setwd("~/DSPG")
# ODFW Fish Count data (Monthly and Yearly)
ODFWDataMonthly <- read_csv("ODFWData.csv", col_types = cols(Season = col_factor()))
ODFWDataYearly <- read_csv("ODFWDataYearly.csv") # Actual is total directly from ODFW, Total is from sum of monthly provided data
View(ODFWDataMonthly)
View(ODFWDataYearly)
View(ODFWDataYearly)
View(ODFWDataYearly)
reticulate::repl_python()
